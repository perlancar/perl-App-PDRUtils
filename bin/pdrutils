#!perl

# DATE
# VERSION

BEGIN { $ENV{VERBOSE} //= 1 }

use 5.010;
use strict;
use warnings;
require Log::Any unless $ENV{COMP_LINE};

use App::PDRUtils;
use Perinci::CmdLine::Any;

my $prefix = '/App/PDRUtils/';
Perinci::CmdLine::Any->new(
    %App::PDRUtils::Common_CLI_Attrs,
    url => $prefix,
    subcommands => {
        'inc-prereq-version-to' => {url => "${prefix}inc_prereq_version_to"},
        'dec-prereq-version-to' => {url => "${prefix}dec_prereq_version_to"},
        'inc-prereq-version-by' => {url => "${prefix}inc_prereq_version_by"},
        'dec-prereq-version-by' => {url => "${prefix}dec_prereq_version_by"},
        'set-prereq-version-to' => {url => "${prefix}set_prereq_version_to"},
        'remove-prereq'         => {url => "${prefix}remove_prereq"},
        'add-prereq'            => {url => "${prefix}add_prereq"},
    },
    log => 1,
)->run;

1;
# ABSTRACT:
# PODNAME:

=head1 DESCRIPTION

B<EARLY RELEASE. SOME SUBCOMMANDS NOT YET IMPLEMENTED.>

If you have one or more CPAN (or DarkPAN) perl distribution repos on your
filesystem, then this suite of CLI utilities might be useful for you. Currently
only the combination of L<Dist::Zilla>-based Perl distributions managed by git
version control is supported.

To use this suite of utilities, first create a configuration C<~/pdrutils.conf>
containing at the very least something like:

 repos = !paths ~/repos/perl-*

You can change the C<~/repos/perl-*> part to a wildcard of where you put your
perl dist repos. Another example where you specify multiple wildcard patterns:

 repos = !paths ~/repos/perl-* ~/repos-[12]*/perl-* ~/repos-private/perl-*

Or, if you prefer to specify the repos individually:

 repos = /home/budi/Foo-Bar
 repos = /home/budi/Foo-Baz
 repos = /home/budi/Qux
 repos = !path ~/perl-Module-Zap

(Note that if you want C<~> to be expanded into your home directory, like in a
Unix shell, you need to put C<!path> encoding as the prefix for the value. See
L<IOD> for more details on the configuration format.)

A few things that you can do with the utilities:

=over

=item * List distributions based on various criteria

B<NOT YET IMPLEMENTED.> List the names of all distributions:

 % pdrutils ls

List the names as well as other details of all distributions:

 % pdrutils ls -l

List distributions that have unclean git status (needs to be committed, etc):

 % pdrutils ls --no-git-clean

List distributions that specify prereq to a certain module:

 % pdrutils ls --depends Foo::Bar
 % pdrutils ls --depends 'Foo::Bar >= 0.12'
 % pdrutils ls --depends 'Foo::Bar = 0.12'
 % pdrutils ls --depends 'Foo::Bar < 0.12'

List distributions that depend on certain prereq in a certain phase/relationship
only:

 % pdrutils ls --depends 'Test::More < 0.98' --phase test

List distributions that does I<not> depend on a certain module:

 % pdrutils ls --depends-not Baz

=item * Add prereq

Add a prereq to C<Foo::Bar> (by default version is C<0> and if there is already
an existing prereq to C<Foo::Bar>, will do nothing).

 % pdrutils add-prereq Foo::Bar

Set version, and replace existing prereq line:

 % pdrutils add-prereq --replace Foo::Bar 1.23

=item * Remove prereq

 % pdrutils remove-prereq Foo::Bar

=item * Modify prereq: set/increase/decrease version

For example, you want to increase the minimum prereq version for all your
distributions, e.g. L<Bencher> to 0.30:

 % pdrutils inc-prereq-version-to Bencher 0.30

All distributions which do not list L<Bencher> as a prereq in their F<dist.ini>,
or distributions which already list L<Bencher> version 0.30 or later, won't be
modified.

Some other examples:

 % pdrutils dec-prereq-version-to Some::Module 1.2
 % pdrutils inc-prereq-version-by Some::Module 0.01
 % pdrutils dec-prereq-version-by Some::Module 0.01
 % pdrutils set-prereq-version Some::Module 1.2

=back

=cut
